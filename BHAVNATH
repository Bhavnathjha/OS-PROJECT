#include<iostream>
using namespace std;
#include<stdio.h>
#include<conio.h>
 
class sched{
public:
    int n,btt[10],att[10],tata[10],wtt[10],rtt[10],finished[10],tww,ttt,tot;
    void EnterData();
    void SRTF();
    void Init();
    void dispTime();
    void FCFS();
    int NextProcess(int);
    void RR();
};
 
void sched::EnterData()
{
    cout<<"Enter no. of processes\n";
    cin>>n;
    cout<<"Enter the burst times in order :\n";
    for(int i=0;i<n;i++)
    cin>>btt[i];
    cout<<"Enter the arrival times in order:\n";
    for(int i=0;i<n;i++)
    cin>>att[i];
}
 
void sched::Init(){
    tot=0;
    tww=0;
    ttt=0;
    for(int i=0; i<n; i++){
        rtt[i]=btt[i];
        finished[i]=0;
        wtt[i]=0;
        tata[i]=0;
        tot+=btt[i];
        }
}
 
void sched::SRTF(){
    EnterData();
    Init();
    int time,next=0,old,i=0,tq;
	cout<<"Gantt Chart\n ";
    for(time=0;time<tot;time++)
    {
     	
			old=next;
        	next=NextProcess(time);
        	if(old!=next || time==0) cout<<"("<<time<<")|==P"<<next+1<<"==|";
        	rtt[next]=rtt[next]-1;
        	if(rtt[next]==0) finished[next]=1;
        	for(i=0;i<n;i++)
            if(i!=next && finished[i]==0 && att[i]<=time)
                wtt[i]++;
	 
    }
    cout<<"("<<tot<<")"<<endl;
 
    for(i=0;i<n;i++)
        if(!finished[i]) {cout<<"Scheduling failed, cannot continue\n"; return;
		}
 
    dispTime();
 
}
 
void sched::dispTime()
{	
    for(int i=0;i<n;i++)
    {
 
        tww+=wtt[i];
        tata[i]=wtt[i]+btt[i];
        ttt+=tata[i];
        cout<<"Waiting time for P"<<(i+1)<<" = "<<wtt[i]<<", Turnaround time = "<<tata[i]<<endl;
 
    }
 
    cout<<"Avg Waiting time = "<<(double)tww/n<<" and Avg Turnaround time = "<<(double)ttt/n<<endl;
    cout<<"Scheduling complete\n";
}

int sched::NextProcess(int time){
 
        int i,low;
        for(i=0;i<n;i++)
            if(finished[i]==0){low=i; break; }
        for(i=0;i<n;i++)
            if(finished[i]!=1)
                if(rtt[i]<rtt[low] && att[i]<=time)
                        low=i;
        return low;
 
}
 
void sched::RR(){
 
    EnterData();
    Init();
    int tq,j,q,i,dec=0;
    cout<<"Enter the time quantum:\n";
    cin>>q;
    cout<<"Gantt Chart\n ";
    for(tq=0;tq<tot;)
    {
        for(i=0;i<n;i++)
        {
            if(att[i]<=tq && finished[i]==0)
            {
 
                cout<<"("<<tq<<")|==P"<<(i+1)<<"==|";
                if(rtt[i]<q)  {
                    dec=rtt[i];
                }
                else {dec=q;}
 
                rtt[i]=rtt[i]-dec;
                if(rtt[i]==0) finished[i]=1;
                for(j=0;j<n;j++)
                    if(j!=i && finished[j]==0 && att[j]<=tq)
                        wtt[j]+=dec;
                 tq=tq+dec;
 
            }
 
        }
 
    }
 
    cout<<"("<<tot<<")"<<endl;
    dispTime();
 
}
void sched::FCFS(){
	int n,btt[20],wtt[20],tata[20],avwt=0,avtat=0,i,j;
    cout<<"Enter total number of processes(maximum 20):";
    cin>>n;
 
    cout<<"\nEnter Process Burst Time\n";
    for(i=0;i<n;i++)
    {
        cout<<"P["<<i+1<<"]:";
        cin>>btt[i];
    }
 
    wtt[0]=0;
    for(i=1;i<n;i++)
    {
        wtt[i]=0;
        for(j=0;j<i;j++)
            wtt[i]+=btt[j];
    }
 
    cout<<"\nProcess\t\tBurst Time\tWaiting Time\tTurnaround Time";
 
    for(i=0;i<n;i++)
    {
        tata[i]=btt[i]+wtt[i];
        avwt+=wtt[i];
        avtat+=tata[i];
        cout<<"\nP["<<i+1<<"]"<<"\t\t"<<btt[i]<<"\t\t"<<wtt[i]<<"\t\t"<<tata[i];
    }
 
    avwt/=i;
    avtat/=i;
    cout<<"\n\nAverage Waiting Time:"<<avwt;
    cout<<"\nAverage Turnaround Time:"<<avtat;
}
int main()
{
    sched s;
    int ch;
 
    while(ch!=2)
    {
        cout<<"1.Shortest Remaining time\n2.Round Robin\n3.First Come First Serve\n4. Exit\nEnter choice: ";
        cin>>ch;
        system("cls");
        switch(ch)
        {
            case 1: s.SRTF();
            		break;
			case 2:	s.RR();
					 break;
            case 3: s.FCFS();
            case 4: break;
            default: cout<<"Invalid Option\n";
            		ch=2;
 
        }
    }
 return 0;
}
